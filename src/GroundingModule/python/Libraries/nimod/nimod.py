# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_nimod', [dirname(__file__)])
        except ImportError:
            import _nimod
            return _nimod
        if fp is not None:
            try:
                _mod = imp.load_module('_nimod', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _nimod = swig_import_helper()
    del swig_import_helper
else:
    import _nimod
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def initialize():
  return _nimod.initialize()
initialize = _nimod.initialize

def step():
  return _nimod.step()
step = _nimod.step

def shutdown():
  return _nimod.shutdown()
shutdown = _nimod.shutdown

def update_depth():
  return _nimod.update_depth()
update_depth = _nimod.update_depth

def update_image():
  return _nimod.update_image()
update_image = _nimod.update_image

def update_user():
  return _nimod.update_user()
update_user = _nimod.update_user

def update_skeleton():
  return _nimod.update_skeleton()
update_skeleton = _nimod.update_skeleton

def add_depth(*args):
  return _nimod.add_depth(*args)
add_depth = _nimod.add_depth

def add_image(*args):
  return _nimod.add_image(*args)
add_image = _nimod.add_image

def add_user(*args):
  return _nimod.add_user(*args)
add_user = _nimod.add_user

def add_skeleton(*args):
  return _nimod.add_skeleton(*args)
add_skeleton = _nimod.add_skeleton
# This file is compatible with both classic and new-style classes.


